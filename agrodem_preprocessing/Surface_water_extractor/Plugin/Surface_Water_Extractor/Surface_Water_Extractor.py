# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Surface_Water_Extractor
                                 A QGIS plugin
 To be updated
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-09-25
        git sha              : $Format:%H$
        copyright            : (C) 2019 by KTH-dESA
        email                : khavari@kth.se
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtWidgets import *
import os
import shutil
from qgis.utils import *
from qgis.core import *
from qgis.gui import *
from PyQt5.QtGui import *
from processing.core.Processing import Processing
Processing.initialize()
import processing
import datetime

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Surface_Water_Extractor_dialog import Surface_Water_ExtractorDialog
import os.path


class Surface_Water_Extractor:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Surface_Water_Extractor_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.dlg = Surface_Water_ExtractorDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Surface_Water_Extractor')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'Surface_Water_Extractor')
        self.toolbar.setObjectName(u'Surface_Water_Extractor')

        self.dlg.lineEdit.clear()
        self.dlg.toolButton.clicked.connect(self.select_workspace)
        self.dlg.toolButton_2.clicked.connect(self.select_csv)


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Surface_Water_Extractor', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Surface_Water_Extractor/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Surface_Water_Extractor'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Surface_Water_Extractor'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_workspace(self):
        workspace = QFileDialog.getExistingDirectory(self.dlg, "Enter your workspace directory ", "")
        self.dlg.lineEdit.setText(workspace)

    def select_csv(self):
        settlement = QFileDialog.getOpenFileName(self.dlg, "select file ", directory=None, filter=None, initialFilter=None)
        self.dlg.lineEdit_2.setText(str(settlement))

    def projCord_func(self):
        projCord = self.mQgsProjectionSelectionWidget(self.dlg, "Enter the CRS")
        self.dlg.mQgsProjectionSelectionWidget.crs(projCord)

    def run(self):
        """Run method that performs all the real work"""

        self.dlg.comboBox.clear()
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_3.clear()
        self.dlg.comboBox_4.clear()

        layers = QgsProject.instance().mapLayers().values()
        for layer in layers:
            if layer.type() == QgsMapLayer.RasterLayer:
                self.dlg.comboBox_2.addItem(layer.name(), layer)
            elif layer.type()== QgsMapLayer.VectorLayer and (layer.wkbType()==QgsWkbTypes.Polygon or layer.wkbType() == QgsWkbTypes.MultiPolygon):
                self.dlg.comboBox.addItem(layer.name(), layer)
                self.dlg.comboBox_4.addItem(layer.name(), layer)
            elif layer.type() == QgsMapLayer.VectorLayer and (layer.wkbType() == QgsWkbTypes.LineString or layer.wkbType() == QgsWkbTypes.MultiLineString):
                self.dlg.comboBox_3.addItem(layer.name(), layer)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:

            iface.actionShowPythonDialog().trigger()
            workspace = self.dlg.lineEdit.text()
            projCord = self.dlg.mQgsProjectionSelectionWidget.crs().authid()
            csv_file = self.dlg.lineEdit_2.text()
            name_output = self.dlg.lineEdit_3.text()
            path = csv_file[2:-19]
            uri = r"file:///" + path + "?delimiter=%s&xField=%s&yField=%s&crs=%s" % (",", "lon", "lat","EPSG:4326")
            lyr = QgsVectorLayer(uri, 'Settlementfile', 'delimitedtext')
            QgsProject.instance().addMapLayer(lyr)
            admin = self.dlg.comboBox.currentData()
            DEM = self.dlg.comboBox_2.currentData()
            rivers = self.dlg.comboBox_3.currentData()
            reservoirs = self.dlg.comboBox_4.currentData()

            if not os.path.exists(workspace + r"/Assist"):
                os.makedirs(workspace + r"/Assist")

            assist = workspace + r"/Assist"

            QgsVectorFileWriter.writeAsVectorFormat(lyr, workspace + r"/settlements.shp", "utf-8", lyr.crs(), "ESRI Shapefile")
            settlements = QgsVectorLayer(workspace + r"/settlements.shp", 'Settlementfile', 'ogr')

            QgsProject.instance().addMapLayer(settlements)
            QgsProject.instance().removeMapLayer(lyr)

            ext = admin.extent()

            xmin = ext.xMinimum() - 1
            xmax = ext.xMaximum() + 1
            ymin = ext.yMinimum() - 1
            ymax = ext.yMaximum() + 1

            coords = '{},{},{},{}'.format(xmin, xmax, ymin, ymax)

            #Fixing invalid geometries if they exist
            processing.run("native:fixgeometries",{'INPUT': rivers, 'OUTPUT': assist + r"/rivers.shp"})
            processing.run("native:fixgeometries", {'INPUT': reservoirs, 'OUTPUT': assist + r"/reservoirs.shp"})

            # Clipping all layers
            processing.run("native:clip", {
                'INPUT': assist + r"/rivers.shp", 'OVERLAY': admin, 'OUTPUT': workspace + r"/rivers.shp"})
            processing.run("native:clip", {
                'INPUT': assist + r"/reservoirs.shp", 'OVERLAY': admin, 'OUTPUT': workspace + r"/reservoirs.shp"})
            processing.run("gdal:cliprasterbyextent", {'INPUT': DEM,'PROJWIN': coords,'NODATA': None, 'OPTIONS': '', 'DATA_TYPE': 0,
                                                       'OUTPUT': workspace + r"/elevation.tif"})

            # Interpolate the elevation layer
            processing.run("gdal:fillnodata", {
                'INPUT': workspace + r"/elevation.tif",
                'BAND': 1, 'DISTANCE': 10, 'ITERATIONS': 0, 'NO_MASK': False,
                'MASK_LAYER': workspace + r"/elevation.tif",
                'OUTPUT': assist + r"/elevation_interp.tif"})

            # Reprojecting the elevation map
            processing.run("gdal:warpreproject", {'INPUT': assist + r"/elevation_interp.tif", 'SOURCE_CRS': None,
                                                  'TARGET_CRS': QgsCoordinateReferenceSystem(projCord),
                                                  'RESAMPLING': 0, 'NODATA': None, 'TARGET_RESOLUTION': None,
                                                  'OPTIONS': '', 'DATA_TYPE': 0, 'TARGET_EXTENT': None,
                                                  'TARGET_EXTENT_CRS': None, 'MULTITHREADING': False, 'EXTRA': '',
                                                  'OUTPUT': assist + r"/elevation.tif"})

            # Converting rivers and reservoirs to points
            processing.run("qgis:polygonstolines", {'INPUT': workspace + r"/reservoirs.shp",'OUTPUT': assist + r"/reservoirs_lines.shp"})
            processing.run("saga:convertlinestopoints", {
                'LINES': assist + r"/reservoirs_lines.shp",'ADD         ': True, 'DIST': 0.000833333,'POINTS': assist + r"/reservoirs_points.shp"})
            processing.run("saga:convertlinestopoints", {
                'LINES': workspace + r"/rivers.shp",'ADD         ': True, 'DIST': 0.000833333,'POINTS': assist + r"/rivers_points.shp"})

            # Merging points from rivers and reservoirs
            processing.run("native:mergevectorlayers", {'LAYERS': [assist + r"/rivers_points.shp",assist + r"/reservoirs_points.shp"], 'CRS': None, 'OUTPUT': assist + r"/rivers_and_reservoirs.shp"})

            # Adding IDs to the water points
            processing.run("qgis:fieldcalculator",
                           {'INPUT': assist + r"/rivers_and_reservoirs.shp", 'FIELD_NAME': 'id', 'FIELD_TYPE': 2,
                            'FIELD_LENGTH': 80, 'FIELD_PRECISION': 3, 'NEW_FIELD': True, 'FORMULA': ' @row_number ',
                            'OUTPUT': assist + r"/rivers_and_reservoirs_IDs.shp"})

            # Reprojecting the merged points to target CRS
            processing.run("native:reprojectlayer", {'INPUT': assist + r"/rivers_and_reservoirs_IDs.shp",
                'TARGET_CRS': QgsCoordinateReferenceSystem(projCord), 'OUTPUT': assist + r"/projected_rivers_and_reservoirs.shp"})

            # Adding elevation values to rivers and reservoirs
            processing.run("saga:addrastervaluestopoints", {
                'SHAPES': assist + r"/projected_rivers_and_reservoirs.shp",
                'GRIDS': [assist + r"/elevation.tif"], 'RESAMPLING': 0,
                'RESULT':  assist + r"/rivers_and_reservoirs_elev.shp"})


            # Reprojecting settlementfile to target CRS
            processing.run("native:reprojectlayer", {'INPUT': workspace + r"/settlements.shp",
                'TARGET_CRS': QgsCoordinateReferenceSystem(projCord), 'OUTPUT': assist + r"/settlements.shp"})


            # Calculating distances
            processing.run("qgis:distancetonearesthubpoints",
                           {'INPUT': assist + r"/settlements.shp",
                            'HUBS':  assist + r"/rivers_and_reservoirs_elev.shp",
                            'FIELD': 'elevation', 'UNIT': 3, 'OUTPUT': assist + r"/final_output_placeholder.shp"})

            # Determining suitability index
            processing.run("qgis:fieldcalculator",
                           {'INPUT': assist + r"/final_output_placeholder.shp", 'FIELD_NAME': 'suit', 'FIELD_TYPE': 1,
                            'FIELD_LENGTH': 10, 'FIELD_PRECISION': 3, 'NEW_FIELD': True,
                            'FORMULA': 'CASE WHEN \"HubDist\" <= 5 THEN 1 ELSE 9999 END', 'OUTPUT': assist + r"/final_output_placeholder_2.shp"})

            # Exporting CSV
            processing.run("qgis:refactorfields", {
                'INPUT': assist + r"/final_output_placeholder_2.shp",
                'FIELDS_MAPPING': [{'expression': '"Pixel"', 'length': 10, 'name': 'Pixel', 'precision': 0, 'type': 4},
                                   {'expression': '"State"', 'length': 254, 'name': 'State', 'precision': 0,
                                    'type': 10},
                                   {'expression': '"lon"', 'length': 23, 'name': 'lon', 'precision': 15, 'type': 6},
                                   {'expression': '"lat"', 'length': 23, 'name': 'lat', 'precision': 15, 'type': 6},
                                   {'expression': '"Crop"', 'length': 254, 'name': 'Crop', 'precision': 0, 'type': 10},
                                   {'expression': '"Fraction"', 'length': 23, 'name': 'Fraction', 'precision': 15,
                                    'type': 6},
                                   {'expression': '"CropArea"', 'length': 23, 'name': 'CropArea', 'precision': 15,
                                    'type': 6},
                                   {'expression': '"HubName"', 'length': 254, 'name': 'elevation', 'precision': 0,
                                    'type': 10},
                                   {'expression': '"HubDist"', 'length': 23, 'name': 'sw_dist', 'precision': 15,
                                    'type': 6},
                                   {'expression': '"suit"', 'length': 10, 'name': 'sw_suit', 'precision': 3,
                                    'type': 2}], 'OUTPUT': workspace + r"/" + name_output + ".csv"})

            pass
